<정보처리기사 단원>
1. 요구사항 확인
2. 데이터 입출력 구현
3. 통합 구현
4. 서버 프로그램 구현
5. 인터페이스 구현
6. 화면 설계
7. 애플리케이션 테스트 관리
8. SQL 응용
9. 소프트웨어 개발 보안 구축
10. 프로그래밍 언어 활용
11. 응용 SW 기초 기술 활용
12. 제품 소프트웨어 패키징

---------------------

<통합 구현>
Section 64. 통합 구현 <C>
1. 통합 구현
 - 송수신 모듈과 중계 모듈 간의 연계를 구현하는 것.
 - 송수신 방식이나 시스템 아키텍처 구성, 송수신 모듈 구현방법 등에 따라 다르므로 사용잦의 요구사항과 구축 환경에 적합한 방식을 설계해야 한다.
 - 일반적인 통합 구현은 송수신 시스템과 모듈, 중계 시스템, 연계 데이터, 네트워크로 구성된다.
 
2. 통합 구현의 구성요소
 - 송신 시스템과 모듈
	송신 시스템 : 데이터를 생성 및 변환하여 전송하는 시스템으로, 송신 모듈과 모니터링 기능으로 구성됨
	송신 모듈 : 전송 데이터를 생성하고 필요에 따라 전송 데이터의 변환 등을 수행함
 - 수신 시스템과 모듈
	수신 시스템 : 수신 받은 데이터를 정제 및 변환하는 시스템으로, 수신 모듈과 모니터링 기능으로 구성됨.
	수신 모듈 : 수신 데이터를 정제하고 애플리케이션이나 데이터베이스(DB) 테이블에 적합한 데이터로 변환하는 작업 등을 수행함.
 - 중계 시스템
	내외부 시스템 간 또는 내부 시스템 간의 연계 시 사용되는 아키텍처
 - 연계 데이터
	송수신 시스템 간 송수신되는 데이터
 - 네트워크
	송신 시스템, 수신 시스템, 중계 시스템을 연결해주는 통신망
	
3. 연계 요구사항 분석
 - 연계 데이터를 식별 및 표준화하여 연계 데이터를 정의하는 것이다.
 - 연계 요구사항 분석 절차
	1) 하드웨어 및 소프트웨어 구성, 네트워크 현황 확인
	2) 테이블 정의서, 코드 정의서 등의 문서 확인
	3) 체크리스트 작성
	4) 관련 문서 공유 및 인터뷰, 설문조사 실시
	5) 요구사항 정의서 작성
	
4. 연계 데이터 식별 및 표준화의 절차
 1) 연계 범위 및 항목 정의 : 시스템 간 연계할 정보를 상세화 하여 정의
 2) 연계 코드 변환 및 매핑 : 연계 정보 중 코드로 관리되어야 할 항목을 찾아 코드로 변환
 3) 연계 데이터 식별자와 변경 구분 추가 : 연계 정보에 데이터 구분 식별자, 작업 구분 정보, 테이블/파일 관리 정보 등을 추가
 4) 연계 데이터 표현 방법 정의 : 연계 대상 범위, 대상 항목, 코드 변환 방식, 매핑 방식을 정의한 후 연계 데이터 구성
 5) 연계 정의서 및 명세서 작성 : 이전 과정에서 정의된 다양한 항목들과 파악된 현황들을 문서화함
 
Section 65. 연계 메커니즘 <C>
1. 연계 메커니즘
 - 데이터의 생성 및 전송을 담당하는 송신 시스템과 데이터 수신 및 운영 DB 반영을 담당하는 수신 시스템으로 구성된다.
 - 송수신 시스템 사이에는 데이터의 송수신과 송수신 시스템 현황을 모니터링하는 중계 시스템을 설치할 수 있다.
 - 연계 메커니즘의 연계 방식
	직접 연계 방식 : 중간 매개체 없이 송수신 시스템이 직접 연계하는 방식(DB Link, API/Open API, DB Connection, JDBC 등)
	간접 연계 방식 : 송수신 시스템 사이에 중간 매개체를 두어 연계하는 방식(연계 솔루션, ESB, 소켓, 웹 서비스 등)
	
2. 연계 메커니즘의 과정
 1) 연계 데이터 생성 및 추출
 2) 코드 매핑 및 데이터 변환
 3) 인터페이스 테이블 또는 파일 생성
 4) 연계 서버 또는 송신 어댑터
 < 전 송 >
 5) 연계 서버 또는 수신 어댑터
 6) 인터페이스 테이블 또는 파일 생성
 7) 코드 매핑 및 데이터 변환
 8) 운영 DB에 연계 데이터 반영
 
3. 연계 메커니즘의 구성
 - 연계 데이터 생성 및 추출
	연계 솔루션과 관계없이 응용 시스템에서 연계 데이터를 생성하고 추출하는 과정
 - 코드 매핑 및 데이터 변환
	송신 시스템에서 사용하는 코드를 수신 시스템에서 사용하는 코드로 매핑 및 변환 과정
 - 인터페이스 테이블 또는 파일 생성
	연계 데이터를 인터페이스 테이블이나 파일 형식으로 생성하는 과정
 - 로그(log) 기록
	송수신 시스템에서 수행되는 모든 과정에 관한 결과 및 오류에 대한 정보를 로그 테이블이나 파일에 기록하는 과정
 - 연계 서버 또는 송수신 어댑터
	연계 서버 : 데이터를 전송 형식에 맞게 변환하고 송수신을 수행하는 등 송수신과 관련된 모든 처리 수행
	송신 어댑터 : 인터페이스 테이블 또는 파일의 데이터를 전송 형식에 맞도록 변환 및 송신 수행
	수신 어댑터 : 수신 데이터를 인터페이스 테이블이나 파일로 생성
 - 전송
	송신 시스템에서 생성된 연계 데이터를 네트워크 환경에 맞는 데이터로 변환한 후 수신 시스템으로 보내는 것
 - 운영 DB에 연계 데이터 반영
	수신된 인터페이스 테이블 또는 파일 구조의 데이터를 변환 프로그램을 이용하여 수신 시스템의 운영 DB에 반영하는 과정.
 
Section 66. 연계 장애 및 오류처리 구현
1. 연계 메커니즘 구간 별 장애 및 오류 모니터링 현황
 - 연계 메커니즘에서 오류 발생 시점, 오류 로그 기록 장소, 오류 로그 기록 주체는 크게 송수신 시스템, 연계 서버 구간으로 구분된다.
 - 송신 시스템 : 데이터 생성 및 추출 시, 코드 매핑 및 데이터 변환 시, 인터페이스 테이블 또는 파일 등록 시
 - 수신 시스템 : 연계 데이터 로드 시, 코드 매핑 및 데이터 변환 시, 운영 DB에 반영 시
 - 연계 서버 : 연계 데이터 로드 시, 코드 매핑 및 데이터 변환 시, 수신 시스템의 데이터 형식으로 변환 및 로드 시
 
2. 장애 및 오류 유형과 처리방안
 - 장애 및 오류 유형의 분류 : 송수신 시스템의 연계 프로그램 오류, 연계 서버의 오류, 견계 데이터의 오류
 - 송수신 시스템의 연계 프로그램, 연계 서버에서 기록하는 로그를 통해 장애 및 오류 원인을 확인하고 분석하여 적절한 처리방안을 선택한다.
 
3. 장애 및 오류의 확인과 처리 절차
 - 1차적으로 연계 서버에서 제공하는 장애 및 오류 현황 모니터링 화면을 통해 오류 원인 및 발생 현황을 확인
 - 1차에서 확인이 불가능한 경우 송수신 시스템의 연계 프로그램과 연계 서버에서 기록한 오류 로그 테이블 또는 파일을 확인하여 오류 원인을 분석
 - 발생한 오류에 대한 원인이 확인되면 원인에 따른 적절한 조치를 취한다.
 
4. 장애 및 오류의 정의와 설계
 - 장애 및 오류 관리 대상 : 송수신 시스템의 연계 프로그램에서 관리하는 장애 및 오류를 관리 대상으로 정의
 - 관리 대상의 장애 및 오류 코드와 메시지 : 관리 대상에서 식별한 오류 내용을 주제별로 분류, 각 오류 내용에 오류 코드 부여, 오류 메시지 정의
 - 장애 및 오류 코드와 메시지 관리 방식 : 관리 대상 오류 코드와 오류 메시지가 많은 경우에는 테이블 관리 방식을, 적은 경우에는 파일 관리 방식 선택
 - 장애 및 오류 기록 방식 : 오류 로그 테이블이나 파일은 기록 단위에 따라 인터페이스 테이블이나 파일에 대한 로그, 연계 데이터에 대한 로그 설계
 
Section 67. 연계 데이터 보안 적용 <C>
1. 연계 데이터 보안
 - 송신 시스템에서 수신 시스템으로 전송되는 연계 데이터는 보안에 취약할 수 있음
 - 일반적인 연계 데이터 보안 방식 : 전송 구간 보안, 데이터 보안
 
2. 전송 구간 보안
 - 전송되는 데이터나 패킷을 쉽게 가로챌 수 없도록 암호화 기능이 포함된 프로토콜을 사용한다.
 - 데이터나 패킷을 가로채더라도 내용을 확인할 수 없게 데이터나 패킷을 암호화 한다.
 - 패킷 : 전송 혹은 다중화를 목적으로 데이터를 일정한 크기로 분할 후 송수신측 주서와 제어 정보 등을 부가하여 만든 데이터 블럭
 
3. 데이터 보안
 - 송신 시스템에서 연계 데이터를 추출할 때와 수신 시스템에서 데이터를 운영 DB에 반영할 때 데이터를 암/복호화 하는 것이다.
 - 데이터의 암/복호화 처리 절차
	1) 송신 시스템
	DB에서 연계 데이터 추출
	보안 적용 대산 컬럼을 암호화
	연계 데이터를 인터페이스 테이블 또는 파일에 등록 및 송신
	2) 수신 시스템
	수신된 데이터 중 암호화한 컬럼을 복호화
	운영 DB 반영
	
4. 암/복호화 적용 절차
 1) 암호화 적용 대상, 암호화 알고리즘, 암호화 키 선정
 2) 암호화 적용 대상 컬럼의 데이터 길이 변경
 3) 암호화 알고리즘 라이브러리 확보 및 설치
 4) 연계 응용 프로그램에서 암/복호화 처리 수행
 
Section 68. XML(eXtensible Markup Language) <A>
1. XML
 - 특수한 목적을 갖는 마크업 언어를 만드는 데 사용되는 다목적 마크업 언어이다.
 - 웹브라우저 간 HTML 문법이 호환되지 않는 문제와 SGML의 복잡함을 해결하기 위하여 개발됨.
 - 사용자가 직접 문서의 태그를 정의할 수 있으며, 다른 사용자가 정의한 태그를 사용할 수 있다.
 - 트리 구조로 구성되어 상위 태그는 여러 개의 하위 태그를 가질 수 있다.
 
2. SOAP(Simple Object Access Protocol)
 - 네트워크 상에서 HTTP/HTTPS, SMTP 등을 이용하여 XML을 교환하기 위한 통신 규약
 - 웹 서비스에서 사용되는 메시지의 형식과 처리 방법을 지정한다.
 - 기본적으로 HTTP 기반에서 동작하기 때문에 프록시와 방화벽의 영향 없이 통신할 수 있다.
 - 최근에는 무거운 구조의 SOAP 대신 RESTful 프로토콜을 이용하기도 한다.
 
3. WSDL(Web Service Description Language)
 - 웹 서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어이다.
 - XML로 작성되며, UDDI의 기초가 된다.
 - SOAP, XML 스키마와 결합하여 인터넷에서 웹 서비스를 제공하기 위해 사용된다.
 - 클라이언트는 WSDL 파일을 읽어 서버에서 어떠한 조작이 가능한지를 파악할 수 있다.
 * UDDI : 인터넷에서 전 세계의 비즈니스 업체 목록에 자신의 정보를 등록하기 위한 확장성 생성 언어 기반의 규격.(레지스트리)

Section 69. 연계 테스트 <C> 
1. 연계 테스트의 개요
 - 연계 시스템과 연계 시스템의 구성 요소가 정상적으로 동작하는지 확인하는 활동.
 - 연계 테스트 진행 순서
	연계 테스트 케이스 작성 : 연계 시스템 간의 데이터 및 프로세스의 흐름을 분석하여 필요한 테스트 항목을 도출함
	연계 테스트 환경 구축 : 테스트의 일정, 방법, 절차, 소요 시간 등을 송수신 기관과의 협의를 통해 결정함
	연계 테스트 수행 : 연계 응용 프로그램을 실행하여 연계 테스트 케이스의 시험 항목 및 처리 절차 등을 실제로 진행함
	연계 테스트 수행 결과 검증 : 연계 테스트 케이스의 시험 항목 및 처리 절차를 수행한 결과가 예상 결과와 동일한지 확인