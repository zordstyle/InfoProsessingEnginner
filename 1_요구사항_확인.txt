<정보처리기사 단원> 집가서 pull하면 진짜 변하는지 확인2222
1. 요구사항 확인
2. 데이터 입출력 구현
3. 통합 구현
4. 서버 프로그램 구현
5. 인터페이스 구현
6. 화면 설계
7. 애플리케이션 테스트 관리
8. SQL 응용
9. 소프트웨어 개발 보안 구축
10. 프로그래밍 언어 활용
11. 응용 SW 기초 기술 활용
12. 제품 소프트웨어 패키징

---------------------

<요구사항 확인>
Section 1. 소프트웨어 생명 주기<B>
1. 소프트웨어 생명주기
 - 소프트웨어를 개발하기 위한 과정을 각 단계별로 나눈 것.
 - 대표적인 생명 주기 모형 : 폭포수 모형, 프로토타입 모형, 나선형 모형, 애자일 모형

2. 폭포수 모형
 - 각 단계를 확실히 매듭짓고 그 결과를 검토하여 승인과정을 거친 후 다음 단계를 진행하는 개발 방법론

3. 프로토타입 모형
 - 실제 개발될 소프트웨어에 대한 견본품을 만들어 최종 결과물을 예측하는 모형

4. 나선형 모형(점진적 모형)
 - 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 개발하는 모형
 - 보헴이 제안
 - 추가된 요구사항 첨가 가능, 유지보수 과정 필요 없음
 - 계획 수립 / 위험 분석 / 개발 및 검증 / 고객 평가
 
5. 애자일 모형
 - 고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형
 - 폭포수 모형과 반대
 - 대표 개발 모형 : 스크럼, XP(eXtreme Programming), 칸반, Lean, 기능 중심 개발(FDD; Feature Driven Development)
 
6. 애자일 개발 4가지 핵심 원칙
 - 개인과 상호작용에 더 가치를 둔다
 - 실행되는 SW에 더 가치를 둔다
 - 계약 협상 < 고객과 협업
 - 계획 < 변화에 반응
 
7. 소프트웨어 공학
 - 소프트웨어 위기를 극복하기 위한 방안으로 연구된 학문
 - 기본원칙 : 현대적인 프로그래밍 기술 유지 / 소프트웨어 품질 유지를 위한 지속적 검증 / 개발 관련 사항 및 결과 기록

Section 2. 스크럼 기법(애자일 방법론) <B>
1. 스크럼
 - 팀이 중심이 되어 개발의 효율성을 높이는 기법
 
2. 스크럼 팀
 - 제품 책임자(PO) : 요구사항이 담긴 백로그를 작성하는 주체 / 제품에 대한 이해도가 높음 / 요구사항을 책임지고 의사 결정하는 사람
 - 스크럼 마스터(SM) : 스크럼 팀이 스크럼을 잘 수행할 수 있도록 가이드 역할을 수행함
 - 개발팀(DT) : PO, SM을 제외한 모든 팀원, 제품 개발 수행
 - 백로그 : 제품 개발에 필요한 요구사항을 모아 우선순위를 부여해 놓은 목록
 
3. 스크럼 개발 프로세스
 - 스프린트 계획 회의 : 제품 백로그 중 이번 스프린트에서 수행할 작업을 대상으로 단기 일정 수립
 - 스프린트 : 실제 개발 작업(2~4주)
 - 일일 스크럼 회의 : 모든 팀원이 매일 정해진 시간에 진행 상황 점검 및 남은 작업 시간 소멸차트에 표시
 - 스프린트 검토 회의 : 부분 또는 전체 완성 제품이 요구사하엥 잘 부합하는지 테스팅하는 회의
 - 스프린트 회고 : 정해놓은 규칙 준수 여부 및 개선할 점을 확인하고 기록하는 것
 
Section 3. XP(eXtreme Programming) 기법 <A>
1. XP
 - 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발과정의 반복을 극대화하여 생산성을 향상 시키는 방법
 - 짧고 반복적인 개발 주기, 단순한 설계, 고객의 적극적인 참여
 - 릴리즈(요구사항이 적용되어 부분적으로 기능이 완료된 제품을 제공하는것) / 가시성(개발과정에서 제품의 일부 기능이 구현되면 고객에게 확인시켜주는 것)
 - XP의 5가지 핵심 가치 : 의사소통 / 단순성 / 용기 / 존중 / 피드백
 
2. XP 개발 프로세스
 - 릴리즈 계획 수립 : 부분/전체 개발 완료 시점 일정 수립
 - 이터레이션 : 실제 개발 작업(1~3주)
 - 승인 검사 : 하나의 이터레이션 안에서 부분 완료 제품 구현 시 테스트 하는 것
 - 소규모 릴리즈 : 요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소한 것
 
3. XP의 주요 실천 방법(애자일 방법론)
 - Pair Programming : 다른 사람과 함께 개발 -> 개발에 대한 책임을 공동으로 하는 환경
 - Collective Ownership : 공동 코드 소유, 개발 코드에 대한 권한과 책임을 공동으로 소유함
 - TDD(Test-Driven Dev) : 테스트 주도 개발, 개발자가 실제 코드를 작성하기 전 테스트 케이스를 먼저 작성 -> 자신이 무엇을 해야할지를 정확히 파악함
						  테스트가 지속적으로 진행될 수 있도록 자동화된 테스팅 도구(프레임워크)를 사용함
 - Whole Team : 개발에 참여하는 모든 구성원은 각자 역할이 있고 그에 대한 책임을 가짐
 - Continuous Integration : 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리 될 때 마다 지속적으로 통합됨
 - Refactoring : 프로그램 기능의 변경 없이 시스템을 재구성 하는 것
				 (목적 : 프로그램을 쉽게 이해하고 쉽게 수정하여 빠르게 개발할 수 있도록 하기 위함)
 - Small Releases : 릴리즈 시간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응할 수 있음
 
Section 4. 현행 시스템 파악 <D>
1. 현행 시스템 파악 절차
 - 1단계
	시스템 구성 파악 : 주요 업무인 기간 업무 / 이를 지원하는 지원 업무로 구분하여 기술
	시스템 기능 파악 : 기능을 주요 기능, 하부 기능, 세부 기능으로 구분
	시스템 인터페이스 파악 : 단위 업무시스템 간 데이터 종류, 형힉, 프로토콜, 연계 유형, 주기 등 명시
 - 2단계
	아키텍처 구성 파악 : 최상위 수준에서 계층별로 표현한 아키텍처 구성도 작성
	소프트웨어 구성 파악 : 소프트웨어들의 제품명, 용도, 라이선스 적용 바익, 라이선스 수 등 명시
 - 3단계
	하드웨어 구성 파악 : 시스템들이 운용되는 서버의 주요 사양, 수량, 서버의 이중화(클러스터링) 적용 여부 명시
	네트워크 구성 파악 : 서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성함
 
Section 5. 개발 기술 환경 파악 <B>
1. 개발 기술 환경 파악의 개요
 - 개발하고자 하는 SW와 관련된 OS, DBMS, 미들웨어 등을 선정할 때 고려해야 할 사항을 기술하고, 오픈 소스를 사용할 때 주의해야 할 내용을 제시
 
2. 운영체제(OS; Operating System)
 - 컴퓨터 시스템의 자원을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효율적으로 사용할 수 있도록 환경을 제공하는 SW
 - 컴퓨터 사용자 - 컴퓨터 하드웨어 간 인터페이스 역할을 하는 시스템 SW의 일종
 - 운영체제 관련 요구사항 식별 시 고려사항 : 가용성 / 성능 / 기술 지원 / 주변 기기 / 구축 비용
 
3. 데이터베이스 관리 시스템(DBMS; DataBase Management System)
 - 사용자와 데이터베이스 사이에서 정보를 생성해 주고, 데이터베이스를 관리해주는 SW
 - 기존 파일 시스템의 종속성, 중복성의 문제 해결을 위해 제안된 시스템
 - DBMS 관련 요구사항 식별 시 고려사항 : 가용성 / 성능 / 기술 지원 / 상호 호환성 / 구축 비용
 
4. 웹 애플리케이션 서버(WAS; Web Application Server)
 - 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어
 - 데이터 접근, 세션 관리, 트랜젝션 관리 등을 위한 라이브러리를 제공
 - 주로 데이터베이스 서버와 연동해서 사용 한다.
 - 고려사항 : 가용성 / 성능 / 기술 지원 / 구축 비용
 
5. 오픈 소스(Open Source)
 - 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어
 - 고려사항 : 라이선스의 종류 / 사용자 수 / 기술의 지속 가능성
 
Section 6. 요구사항 정의 <B>
1. 요구 사항
 - 소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명과 운영되는데 필요한 제약 조건
 - SW 개발이나 유지 보수 과정에서 필요한 기준과 근거를 제공한다.
 - 개발에 참여하는 이해관계자들 간의 의사소통을 원활하게 하는 데 도움을 준다
 - 요구사항의 유형 : 기능 요구사항 / 비기능 요구사항 / 사용자 요구사항/ 시스템 요구사항
 
2. 기능 요구사항
 - 기능이나 수행과 관련된 요구사항
  - 시스템 입출력으로 무엇이 포함되어야 하는지
  - 시스템이 어떤 데이터를 저장하거나 연산을 수행해야 하는지
  - 시스템이 반드시 수행해야 하는 기능
  - 사용자가 시스템을 통해 제공 받기를 원하는 기능
  
3. 비기능 요구사항
 - 품질이나 제약사항과 관련된 요구사항
 - 시스템 장비 구성 요구 사항 / 성능 요구사항 / 인터페이스 요구사항 / 데이터 구축을 위해 필요한 요구사항 / 테스트 요구사항 / 보안 요구사항
 - 품질 요구사항 : 가용성 / 정합성 / 상호 호환성 / 대응성 / 이식성 / 확장성 / 보안성
 - 제약 사항
 - 프로젝트 관리 / 자원 요구사항 등

4. 사용자 요구사항
 - 사용자 관점에서 본 시스템이 제공해야 할 요구사항
 - 친숙한 표현으로 이해하기 쉽게 작성된다
 
5. 시스템 요구사항
 - 개발자 관점에서 본 시스템 전체가 제공해야 할 요구사항
 - 전문적이고 기술적인 용어 / 소프트웨어 요구사항이라고도 한다.
 
Section 7. 요구사항 개발 프로세스 <B>
1. 요구사항 개발 프로세스
 - 요구사항을 도출하고 분석한 후 명세서에 정리한 다음 확인 및 검증하는 일련의 구조화된 활동
 - 요구사항 개발 프로세스가 진행되기 전에 타당성 조사가 선행되어야 한다.
 - 도출 / 분석 / 명세 / 확인
 
2. 요구사항 도출(요구사항 수집)
 - 시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항을 식별하고 이해하는 과정
 - 소프트웨어 개발 생명 주기동안 지속적으로 반복
 - 도출하는 방법 : 청취 및 인터뷰 / 설문 / 브레인스토밍 / 워크샵 / 프로토타이핑 / 유스케이스
 
3. 요구사항 분석
 - 요구사항 중 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정
 - 타당성 조사 및 비용과 일정에 대한 제약 설정
 - 요구사항 분석 대표 도구 : 자료 흐름도(DFD), 자료 사전(DD)
 
4. 요구사항 명세
 - 분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것
 - 기능 요구사항 죄다, 비기능 요구사항은 필요한 것만 기술
 - 구체적인 명세를 위해 소단위 명세서가 사용될 수 있다

5. 요구사항 확인(요구사항 검증)
 - 요구사항 명세서가 정확하고 완전하게 작성되었는지를 검토하는 활동
 - 요구사항 관리 도구를 이용해 요구사항 정의 문서들에 대해 형상 관리(SCM; Software Configuration Management) 수행

6. 요구공학
 - 요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문
 
7. 요구사항 명세 기법
 - 정형 명세 기법
	수학적 원리 기반, 모델 기반 / 수학적 기호, 정형화된 표기법 / 요구사항을 정확하고 간결하게 / 작성자에 관계없이 일관성 / 사용자는 이해하기 어려움
	VDM, Z, Petri-net, CSP 등
 - 비정형 명세 기법
	상태, 기능, 객체 중심 / 일반 명사, 동사 등의 자연어 기반 서술 또는 다이어그램 / 작성자에 따라 요구사항 결과가 달라질 수 있다 / 의사소통은 용이
	FSM, Decision Table, ER모델링, State Chart(SADT) 등
	
Section 8. 요구사항 분석 <A>
1. 요구사항 분석
 - 개발 대상에 대한 사용자의 요구사항을 이해하고 문서화 하는 활동
 
2. 구조적 분석 기법
 - 자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법
 - 도형 중심의 분석용 도구와 분석 절차를 이용하여 사용자의 요구사항을 파악하고 문서화한다.
 - 하향식 방법으로 시스템 세분화
 - 주요 구조적 분석 기법 도구 : 자료 흐름도(DFD), 자료 사전(DD) 소단위 명세서(Mini-Spec.), 개체 관계도(ERD), 상태 전이도(STD), 제어 명세서
 
3. 자료 흐름도(DFD; Data Flow Diagram)
 - 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법
 - 자료 흐름 그래프, 버블 차트라고도 함
 - 자료 흐름과 처리를 중심으로 하는 구조적 분석 기법에 이용된다.
 
4. 자료 흐름도 기본 기호
 - 프로세스 : 자료를 변환시키는 시스템의 한 부분 (동그라미 or 네모)
 - 자료 흐름 : 자료의 이동(흐름)이나 연관관계를 나타냄 (화살표)
 - 자료 저장소 : 시스템에서의 자료 저장소(파일, DB)를 나타냄 (위아래 선 or ID|물품대장)
 - 단말 : 시스템과 교신하는 외부 개체, 입력 데이터가 만들어지고 출력 데이터를 받음 (네모/겹쳐진 네모)
 
5. 자료 사전(DD; Data Dictionary)
 - 자료 흐름도에 있는 자료를 더 자세히 정의하고 기록한 것
 - 데이터를 설명하는 데이터 -> 메타 데이터(Meta Data)
 - 자료 사전에서 사용되는 표기 기호
	= : 자료의 정의(~로 구성되어 있다)
	+ : 자료의 연결(그리고)
	( ) : 자료의 생략(생략 가능한 자료)
	[ ] : 자료의 선택(또는)
	{ } : 자료의 반복(iteration)
	* * : 자료의 설명(주석)
	
Section 9. 요구사항 분석 CASE와 HIPO <B>
1. 요구사항 분석용 CASE(자동화 도구)
 - 요구사항을 자동으로 분석하고, 요구사항 분석 명세서를 기술하도록 개발된 도구
 - 대표적인 요구사항 분석용 CASE
	SADT : SortTech 사에서 개발한 것, 구조적 요구 분석을 하기위해 블록 다이어그램을 채택한 자동화 도구
	SREM : TRW사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구
	PSL/PSA : 미시간 대학에서 개발
	TAGS : 시스템 공학 방법 응용에 대한 자동 접근 방법, 개발주기의 전 과정에 이용할 수 있는 통합 자동화 도구

2. HIPO(Hierarchy Input Process Output)
 - 시스템 실행 과정인 입력/처리/출력의 기능을 표현한 것
 - 하향식 소프트웨어 개발을 위한 문서화 도구
 - 기능과 자료의 의존 관계를 동시에 표현할 수 있다
 - HIPO Chart : 시스템의 기능을 여러 개의 고유 모둘료 분할하여 이들 간의 인터페이스를 계층 구조로 표현한 것
 - HIPO Chart의 종류 : 가시적 도표, 총체적 도표, 세부적 도표
 
Section 10. UML(Unified Modeling Language)의 개요 <A>
1. UML
 - 시스템 개발 과정에서 의사소통이 원할하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어
 - Rumbaugh, Booch, Jacobson 등의 객체지향 방법론의 장점을 통합하였다.
 - OMG(Object Management Group)에서 표준으로 지정하였다.
 - UML의 구성 요소 : 사물, 관계, 다이어그램
 
2. 사물(ThingS)
 - 다이어그램 안에서 관계가 형성될 수 있는 대상들
 - 종류
	구조 사물 : 시스템의 개념적, 물리적 요소를 표현(클래스, 유스케이스, 컴포넌트, 노드 등)
	행동 사물 : 시간과 공간에 따른 요소들의 행위를 표현(상호 작용, 상태 머신)
	그룹 사물 : 요소들을 그룹으로 묶어서 표현(패키지)
	주해 사물 : 부가적인 설명이나 제약 조건등을 표현(노트)
	
Section 11. UML - 관계 <B>
1. 관계
 - 사물과 사물 사이의 연관성을 표현하는 것
 - 종류 : 연관 관계, 집합 관계, 포함 관계, 일반화 관계, 의존 관계, 실체화 관계
 
2. 연관 관계
 - 2개 이상의 사물이 서로 관련되어 있는 관계
 - 사물 사이를 실선으로 연결하여 표현
 - 방향성은 화살표로 표현한다.
 - 양방향은 화살표 생략 및 실선으로 연결
 - 다중도를 선 위에 표기
 - 1, n, 0..1, 0..*, *, 1..*, n..*, n..m
 
3. 집합 관계
 - 하나의 사물이 다른 사물에 포함되어 있는 관계
 - 포함하는 쪽과 포함되는 쪽은 서로 독립적이다
 - 포함되는 쪽에서 포함하는 쪽으로 속이 빈 마름모를 연결하여 표현
 
4. 포함 관계
 - 포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계
 - 포함하는 쪽과 포함되는 쪽은 서로 독립될 수 없고, 생명주기를 함께 한다
 - 포함되는 쪽에서 포함하는 쪽으로 속이 채워진 마름모를 연결하여 표현한다
 
5. 일반화 관계
 - 하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계
 - 보다 일반적인 개념을 부모, 보다 구체적인 개념을 자식이라고 부른다
 - 구체적인 사물에서 일반적인 사물 쪽으로 속이 빈 화살표를 연결하여 표현한다.

6. 의존 관계
 - 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계
 - 하나의 사물과 다른 사물이 소유 관계는 아니지만 사물의 변화가 다른 사물에도 영향을 미치는 관계
 - 영향을 주는 사물(등급)이 영향을 받는 사물 쪽(할인율)으로 점선 화살표를 연결하여 표현 한다

7. 실체화 관계
 - 실체화 관계는 사물이 할 수 있거나 해야하는 기능으로, 서로를 그룹화 할 수 있는 관계
 - 사물에서 기능쪽으로 속이 빈 점선 화살표를 연결하여 표현한다.
 
Section 12. UML - 다이어그램 <B>
1. 다이어그램
 - 사물과 관계를 도형으로 표현한 것
 - 여러 관점에서 시스템을 가시화한 뷰를 제공함으로써 의사 소통에 도움을 준다.
 - 정적 모델링은 구조적 다이어그램, 동적 모델링은 행위 다이어그램
 
2. 구조적 다이어그램의 종류
 - 클래스 다이어그램 : 클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현함
 - 객체 다이어그램 : 클래스에 속한 사물들(인스턴스)을 특정 시점의 객체와 객체 사이의 관계로 표현, 럼바우 객체지향 분석 기법에서 객체 모델링에 사용됨.
 - 컴포넌트 다이어그램 : 실제 구현 모듈인 컴포넌트 간의 관계나 컴포넌트 간의 인터페이스를 표현함, 구현 단계에서 사용됨
 - 배치 다이어그램 : 결과물, 프로세스, 컴포넌트 등 물리적 요서들의 위치를 표현함, 구현 단계에서 사용됨
 - 복합체 구조 다이어그램 : 클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현함
 - 패키지 다이어그램 : 유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계를 표현함
 
3. 행위 다이어그램의 종류
 - 유스 케이스 다이어그램 : 사용자의 요구를 분석하는 것으로, 기능 모델링 작업에 사용함, 사용자와 사용 사례로 구성됨
 - 시퀸스 다이어그램 : 상호 작용하는 시스템이나 객체들이 주고받는 메시지를 표현함
 - 커뮤니케이션 다이어그램 : 동작에 참여하는 객체들이 주고받는 메시지와 객체들 간의 연관관계를 표현함
 - 상태 다이어그램 : 하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른객체와의 상호작용에 따라 상태가 어떻게 변화하는가, 럼바우 동적모델링으로 사용
 - 활동 다이어그램 : 시스템이 어떤 기능을 수행하는지 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현함
 - 상호작용 개요 다이어그램 : 상호작용 다이어그램 간의 제어 흐름을 표현함
 - 타이밍 다이어그램 : 객체 상태 변화와 시간 제약을 명시적으로 표현함
 
4. 스테레오 타입
 - UML에서 표현하는 기본 기능 외에 추가적인 기능을 표현하는 것.
 - 주로 표현되는 형태
	<<include>> : 포함 관계
	<<extend>> : 확장 관계
	<<interface>> : 인터페이스 정의
	<<exception>> : 예외 정의
	<<constructor>> : 생성자 역할
	
Section 13. 유스케이스 다이어그램 <B>
1. 기능 모델링
 - 개발될 시스템이 갖춰야 할 기능을 정리한 후 사용자와 함께 정리된 내용을 공유하기 위해 그림으로 표현하는 것
 - 기능 모델링의 종류 : 유스케이스 다이어그램, 액티비티 다이어그램
 
2. 유스케이스 다이어그램
 - 개발될 시스템을 이용해 수행할 수 있는 기능을 사용자의 관점에서 표현한 것
 - 외부 요소와 시스템 간의 상호작용을 확인할 수 있다.
 - 사용자의 요구사항을 분석하기 위한 도구, 시스템의 범위를 파악할 수 있다
 
3. 유스케이스 다이어그램의 구성 요소
 - 시스템/시스템 범위 : 시스템 내부의 유스케이스들을 사각형으로 묶은 것(범위 표현)
 - 액터 : 시스템과 상호 작용하는 모든 외부 요소(주액터 : 사람 / 부액터 : 주액터 목적 달성을 위해 시스템에 서비스를 제공하는 외부 시스템)
 - 유스케이스 : 사용자가 보는 관점에서 시스템이 액터에게 제공하는 서비스나 기능(상품조회)
 - 관계 : 유스케이스 다이어그램에서 액터-유스케이스, 유스케이스-유스케이스 사이에서 나타남 / 포함 관계, 확장 관계, 일반화 관계
 
Section 14. 활동 다이어그램 <B>
1. 활동 다이어그램
 - 사용자의 관점에서 시스템이 수행하는 기능을 처리 흐름에 따라 순서대로 표현한 것(순서도 같음)
 - 하나의 유스케이스 안에서 혹은 유스케이스 사이에서 발생하는 복잡한 처리의 흐름을 명확하게 표현할 수 있다.
 - 자료 흐름도와 유사하다
 
2. 활동 다이어그램의 구성 요소
 - 액션 : 더 이상 분해할 수 없는 단일 작업
 - 액티비티 : 몇 개의 액션으로 분리될 수 있는 작업
 - 시작 노드 : 액션/액티비티가 시작됨을 표현
 - 종료 노드 : 액티비티 안의 모든 흐름이 종료됨을 표현한 것
 - 조건 노드 : 조건에 따라 제어의 흐름이 분리됨을 표현
 - 병합 노드 : 여러 경로의 흐름이 하나로 합쳐짐을 표현한 것
 - 포크 노드 : 택티비티의 흐름이 분리되어 수행됨을 표현한 것
 - 조인 노드 : 분리되어 수행되던 액티비티의 흐름이 다시 합쳐짐을 표현한 것
 - 스윔 레인 : 액티비티 수행을 담당하는 주체를 구분하는 선, 가로 또는 세로 실선을 그어 구분
 
Section 15. 클래스 다이어그램 <B>
1. 정적 모델링
 - 사용자가 요구한 기능을 구현하는데 필요한 자료들의 논리적인 구조를 표현한 것
 - 정적 모델링에서 객체 = 클래스로 추상화
 - 시스템에 의해 처리되거나 생성될 객체들 사이의 관련을 구조적인 관점으로 표현한 것
 - UML을 이용한 정적 모델링의 대표가 클래스 다이어그램
 
2. 클래스 다이어그램 (학원에서 ㅈㄴ 한것)
 - 클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현한 것
 - 시스템을 구성하는 요소에 대애 이해할 수 있는 구조적 다이어그램이다.
 - 시스템 구성요소를 문서화 하는데 사용된다
 
3. 클래스 다이어그램의 구성 요소
 - 클래스 : 각 객체들이 갖는 속성과 동작을 표현(속성 : 클래스의 상태나 정보(field), 오퍼레이션 : 클래스가 수행하는 동작(Method))
 - 제약 조건 : 속서엥 입력될 값에 대한 제약 조건이나 오퍼레이션 수행 전후에 지정해야 할 조건(중괄호에 적음)
 - 관계 : 클래스와 클래스 사이의 연관성 표현(연관 관계, 집합 관계, 포함 관계, 일반화 관계, 의존 관계)
 
4. 연관 클래스
 - 연관 관계에 있는 두 클래스에 추가적으로 표현해야 할 속성이나 오퍼레이션이 있는 경우 생성하는 클래스
 - 두 클래스의 연관 관계를 나타내는 선의 가운데로부터 점선을 연관 클래스로 이어 표현
 - 연관 클래스의 이름은 연관 관계의 이름을 이용해 지정
 
Section 16. 시퀸스 다이어그램
1. 동적 모델링
 - 시스템의 내부 구성 요소들의 상태 변화 과정 간 발생하는 상호작용을 표현한 것
 - 시스템 내부 구성요소들 간에 이루어지는 동작이라는 관점에서 표현한다.
 - 시스템 실행 시 구성 요소들 간 메시지 호출, 즉 오퍼레이션(동작)을 통한 상호 작용에 초점
 - 종류 : 시퀸스 다이어그램, 커뮤니케이션 다이어그램, 상태 다이어그램
 
2. 시퀸스 다이어그램
