<정보처리기사 단원>
1. 요구사항 확인
2. 데이터 입출력 구현
3. 통합 구현
4. 서버 프로그램 구현
5. 인터페이스 구현
6. 화면 설계
7. 애플리케이션 테스트 관리
8. SQL 응용
9. 소프트웨어 개발 보안 구축
10. 프로그래밍 언어 활용
11. 응용 SW 기초 기술 활용
12. 제품 소프트웨어 패키징

---------------------

<데이터 입출력 구현>
Section 31. 데이터 전환 <C>
1. 데이터 전환
 - 운영중인 기존 정보 시스템에서 축적되어 있는 데이터를 추출, 새로 개발할 정보 시스템에서 운영할 수 있도록 변환, 적재하는 과정(ETL)
 - ETL : Extraction, Transformation, Load. 추출, 변환, 적재 과정
 - 데이터 이행(Data Migration), 데이터 이관이라고도 한다.
 
2. 데이터 전환 계획서
 - 데이터 전환 작업에 필요한 모든 계획을 기록하는 문서
 - 주요 항목
	데이터 전환 개요, 데이터 전환 대상 및 범위, 데이터 전환 환경 구성, 데이터 전환 조직 및 역할, 데이터 전환 일정,
	데이터 전환 방안, 데이터 정비 방안, 비상 계획, 데이터 복구 대책
	
Section 32. 데이터 검증 <C>
1. 데이터 검증
 - 원천 시스템의 데이터를 목적 시스템의 데이터로 전환하는 과정이 정상적으로 수행되었는지 여부를 확인하는 과정
 - 검증 방법과 검증 단계에 따라 분류할 수 있다.
 
2. 검증 방법에 따른 분류
 - 로그 검증 : 데이터 전환 과정에서 작성하는 추출, 전환, 적재 로그를 검증한다.
 - 기본 항목 검증 : 로그 검증 외에 별도로 요청된 검증 항목에 대해 검증함.
 - 응용 프로그램 검증 : 응용 프로그램을 통한 데이터 전환의 정합성을 검증.
 - 응용 데이터 검증 : 사전에 정의도니 업무 규칙을 기준으로 데이터 전환의 정합성을 검증함.
 - 값 검증 : 숫자 항목의 합계 검증, 코드 데이터의 범위 검증, 속성 변경에 따른 값 검증을 수행함.
 
3. 검증 단계에 따른 분류
 - 추출 : 원천 시스템 데이터에 대한 정합성 확인(로그 검증)
 - 전환 : 매핑 정의서에 정의된 내용이 정확히 반영되었는지 확인, 매핑 정의서 오류 여부 확인(로그 검증)
 - DB 적재 : SAM 파일을 적재하는 과정에서 발생할 수 있는 오류나 데이터 누락 여부 등 확인(로그 검증)
 - DB 적재 후 : 적재 완료 후 정합성 확인
 - 전환 완료 후 : 데이터 전환 완료 후 추가 검증 과정을 통해 데이터 전환의 정합성 검증(응용 프로그램 검증, 응용 데이터 검증)

Section 33. 오류 데이터 측정 및 정제 <C>
1. 오류 데이터 측정 및 정제
 - 고품질의 데이터를 운영 및 관리하기 위해 수행한다.
 - 진행 과정
	데이터 품질 분석 : 오류 데이터를 찾기 위해 원천 및 목적 시스템의 데이터 정합성 여부를 확인하는 작업
	오류 데이터 측정 : 데이터 품질 분석을 기반으로 정상 데이터와 오류 데이터의 수를 측정하여 오류 관리 목록을 작성함
	오류 데이터 정제 : 오류 관리 목록의 각 항목을 분석하여 원천 데이터를 정제하거나 전환 프로그램을 수정함
	
2. 오류 상태
 - Open : 오류가 보고만 되고 분석되지 않은 상태
 - Assigned : 오류의 영향 분석 및 수정을 위해 개발자에게 오류를 전달한 상태
 - Fixed : 개발자가 오류를 수정한 상태
 - Closed : 수정된 오류에 대해 테스트를 다시 했을 때 오류가 발견되지 않은 상태
 - Deferred : 오류 수정을 연기한 상태
 - Classified : 보고된 오류를 관련자들이 확인했을 때 오류가 아니라고 확인된 상태

3. 데이터 정제 요청서
 - 데이터 정제와 관련된 전반적인 내용을 문서로 작성한 것

4. 데이터 정제 보고서
 - 정제된 원천 데이터가 정상적으로 정제되었는지 확인한 결과를 문서로 작성한 것
 
Section 34. 데이터베이스 개요 <A>
1. 데이터저장소
 - 데이터들을 논리적인 구조로 조직화하거나, 물리적인 공간에 구축한 것을 의미한다.
 - 논리 데이터저장소 : 데이터 및 데이터 간의 연관성, 제약조건을 식별하여 논리적인 구조로 조직화한 것
 - 물리 데이터저장소 : 논리 데이터저장소를 소프트웨어가 운용될 환경의 물리적 특성을 고려하여 실제 저장장치에 저장한 것을 의미한다.
 
2. 데이터베이스(DB)
 - 공동으로 사용될 데이터를 중복을 배제하여 통합 및 저장장치에 저장하여 항상 사용할 수 있도록 운영하는 운영 데이터.
 - 통합된 데이터 : 자료의 중복을 배제한 데이터의 모임
 - 저장된 데이터 : 컴퓨터가 접근할 수 있는 저장 매체에 저장된 자료
 - 운영 데이터 : 조직의 고유한 업무를 수행하는 데 반드시 필요한 자료
 - 공용 데이터 : 여러 응용 시스템들이 공동으로 소유하고 유지하는 자료
 
3. DBMS(데이터 베이스 관리 시스템)
 - 사용자의 요구에 따라 정보를 생성해주고, 데이터베이스를 관리해주는 소프트웨어이다.
 - 기존의 파일 시스템이 갖는 데이터의 종속성과 중복성의 문제를 해결하기 위해 제안된 시스템이다.
 - DBMS의 필수 기능 3가지
	정의 기능 : 데이터 형(Type)과 구조에 대한 정의, 이용 방식, 제약 조건 등을 명시하는 기능
	조작 기능 : 데이터 검색, 갱신, 삽입, 삭제 등을 위해 인터페이스 수단을 제공하는 기능
	제어 기능 : 데이터의 무결성, 보안, 권한 검사, 병행 제어를 제공하는 기능
	
4. 데이터의 독립성
 - 논리적 독립성 : 응용 프로그램과 데이터베이스를 독립시킴으로써, 데이터의 논리적 구조를 변경시키더라도 응용 프로그램은 영향을 받지 않음
 - 물리적 독립성 : 응용 프로그램과 보조기억장치 같은 물리적 장치를 독립 -> 디스크를 추가/변경하더라도 응용 프로그램은 영향을 받지 않음

5. 스키마(Schema)
 - 데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 것이다.
 - 외부 스키마 : 사용자나 응용 프로그래머가 각 개인의 입장에서 필요로 하는 데이터베이스의 논리적 구조를 정의한 것
 - 개념 스키마 : 데이터베이스의 전체적인 논리적 구조. 모든 응용 프로그램이나 사용자들이 필요로 하는 데이터를 종합한 조직 전체의 데이터베이스, 하나만 존재.
 - 내부 스키마 : 물리적 저장장치의 입장에서 본 데이터베이스 구조. 실제로 저장될 레코드의 형식, 저장 데이터 항목의 표현 방법, 내부 레모드의 물리적 순서 등을 나타냄.
 
Section 36. 데이터베이스 설계 <A>
1. 데이터베이스 설계
 - 사용자의 요구를 분석 및 컴퓨터에 저장할 수 있는 데이터베이스의 구조에 맞게 변형한 후 DBMS로 데이터베이스를 구현하여 일반 사용자들이 사용하게 하는 것.
 
2. 데이터베이스 설계 시 고려사항
 - 무결성 : 삽입, 삭제, 갱신 등의 연산 후에도 데이터베이스에 저장된 데이터가 정해진 제약 조건을 항상 만족해야 함.
 - 일관성 : 데이터베이스에 저장된 데이터들 사이나, 특정 질의에 대한 응답이 처음부터 끝까지 변함없이 일정해야 함.
 - 회복 : 시스템에 장애가 발생했을 때 장애 발생 직전의 상태로 복구할 수 있어야 함.
 - 보안 : 불법적인 데이터의 노출 또는 변셩이나 손실로부터 보호할 수 있어야 함.
 - 효율성 : 응답시간의 단축, 시스템의 생산성, 저장 공간의 최적화 등이 가능해야 함.
 - 데이터베이스 확장 : 데이터베이스 운영에 영향을 주지 않으면서 지속적으로 데이터를 추가할 수 있어야 함.
 
3. 데이터베이스 설계 순서
 - 요구 조건 분석 : 요구 조건 명세서 작성
 - 개념적 설계 : 개념 스키마, 트랜잭션 모델링, E-R 모델
 - 논리적 설계 : 목표 DBMS에 맞는 논리 스키마 설계, 트랜잭션 인터페이스 설계
 - 물리적 설계 : 목표 DBMS에 맞는 물리적 구조의 데이터로 변환
 - 구현 : 목표 DBMS의 DDL(데이터 정의어)로 데이터베이스 생성, 트랜잭션 작성
 
4. 요구 조건 분석
 - 데이터베이스가 필요한 용도를 파악하는 것
 - DB 사용자에 따른 수행 업무와 필요한 데이터의 종류, 용도, 처리, 형태, 흐름, 제약 조건 등을 수집한다.
 - 수집된 정보를 바탕으로 요구 조건 명세를 작성한다.
 
5. 개념적 설계(정보 모델링, 개념화)
 - 현실 세계에 대한 인식을 추상적으로 표현하는 관정
 - 개념 스키마 모델링과 트랜젝션 모델링을 병행 수행한다.
 - 요구 분석에서 나온 결과인 요구 조건 명세를 DBMS에 독립적인 E-R 다이어그램으로 작성한다.
 - DBMS에 독립적인 개념 스키마를 설계한다.
 
6. 논리적 설계(데이터 모델링)
 - 현실 세계에서 발생하는 자료를 특정 DBMS가 지원하는 논리적 자료 구조로 변환시키는 과정
 - 개념 스키마를 평가 및 정제하고 DBMS에 따라 서로 다른 논리적 스키마를 설계 하는 단계.
 - 트랜잭션의 인터페이스를 설계한다.
 
7. 물리적 설계(데이터 구조화)
 - 논리적 구조로 표현될 데이터를 물리적 구조의 데이터로 변환하는 과정
 - 다양한 데이터베이스 응용에 대해 처리 성능을 얻기 위해 데이터베이스 파일의 저장 구조 및 액세스 경로를 결정한다.
 - 저장 레코드의 형식, 순서, 접근 경로, 조회 집중 레코드 등의 정보를 사용하여 데이터가 컴퓨터에 저장되는 방법을 묘사한다.
 
8. 데이터베이스 구현
 - 논리적 설계와 물리적 설계에서 도출된 데이터베이스 스키마를 파일로 생성하는 과정
 - 사용하려는 특정 DBMS의 DDL을 이용하여 데이터베이스 스키마를 기술한 후 컴파일하여 빈 데이터베이스 파일을 생성한다.
 - 응용 프로그램을 위한 트랜잭션을 작성한다.
 - 데이터베이스 접근을 위한 응용 프로그램을 작성한다.
 
Section 36. 데이터 모델의 개념 <B>
1. 데이터 모델
 - 현실 세계의 정보들을 체계적으로 표현한 개념적 모형
 - DB설계 과정에서 데이터의 구조(Schema)를 논리적으로 표현하기 위해 지능적 도구로 사용된다.
 - 데이터 모델 구성 요소 : 개체, 속성, 관계
 - 데이터 모델 종류 : 개념적 데이터 모델, 논리적 데이터 모델, 물리적 데이터 모델
 - 데이터 모델에 표시할 요소 : 구조, 연산, 제약조건

2. 개념적 데이터 모델
 - 현실 세계에 대한 인간의 이해를 돕기 위해 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정이다.
 - 속성들로 기술된 개체 타입과 이 개체 타입들 간의 관계를 이용하여 현실 세계를 표현한다.
 - 현실 세계에 존재하는 개체를 인간이 이해할 수 있는 정보 구조로 표현하기 때문에 정보 모델이라고도 한다.
 - 대표적인 개념적 데이터 모델 : E-R 모델
 
3. 논리적 데이터 모델
 - 개념적 구조를 컴퓨터 세계의 환경에 맞도록 변환하는 과정
 - 필드로 기술된 데이터 타입과 이 데이터 타입들 간의 관계를 이용하여 현실 세계를 표현한다.
 - 단순히 데이터 모델이라고 하면 논리적 데이터 모델을 의미한다.
 - 특정 DBMS는 특정 논리적 데이터 모델 하나만 선정하여 사용한다.
 - 논리적 데이터 모델은 데이터 간의 관계를 어떻게 표현하느냐에 따라 관계 모델, 계층 모델, 네트워크 모델로 구분한다.
 
4. 데이터 모델에 표시할 요소
 - 구조 : 논리적으로 표현된 개체 타입들 간의 관계로써 데이터 구조 및 정적 성질 표현
 - 연산 : 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구.
 - 제약 조건 : 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건 
 
Section 37. 데이터 모델의 구성 요소 <B>
1. 개체(Entity)
 - 데이터베이스에 표현하려는 것. 개념이나 정보 단위 같은 현실 세계의 대상체이다.
 - 실세계에 독립적으로 존재하는 유형, 무형의 정보로서 서로 연관된 몇 개의 속성으로 구성된다.
 - 독립적으로 존재하거나 그 자체로서도 구별이 가능. 유일한 식별자에 의해 식별된다
 - 다른 개체와 하나 이상의 관계가 있다.
 - 예시 : 교수번호, 성명, 전공, 소속으로 구성된 교수 개체이다. -> 개체 타입 : 컬럼
 
2. 속성(Attribute)
 - 속성은 데이터베이스를 구성하는 가장 작은 논리적 단위이다.
 - 파일 구조상의 데이터 항목 또는 데이터 필드에 해당한다.
 - 개체를 구성하는 항목으로 개체의 특성을 기술한다.
 - 차수(Degree) : 속성의 수
 - 속성의 특성과 개체 구성 방식에 따라 분류한다.
 
3. 속성의 특성에 따른 분류
 - 기본 속성 : 업무 분석을 통해 정의한 속성, 속성 중 가장 많고 일반적임, 업무로부터 분석한 속성이라도 업무상 코드로 정의한 속성은 기본 속성에서 제외
 - 설계 속성 : 업무상 존재 X, 설계 과정에서 도출해내는 속성. 업무에 필요한 데이터 외에 데이터 모델링을 위해 업무를 규칙화 및 속성을 새로 만들거나 변형하여 정의하는 속성
 - 파생 속성 : 다른 속성으로부터 계산이나 변형 등의 영향을 받아 발생하는 속성. 되도록 적은 수를 정의하는 것이 좋음.
 - 예시
	기본 속성 : 자동차명, 제조일, 연비 등 - 가장 일반적인 속성
	설계 속성 : 자동차 코드(A01-세단, A02-SUV, A03-트럭) - 새롭게 정의한 속성
	파생 속성 : 총판매수량, 총판매금액 - 특정 기간동안 판매된 자동차의 수량과 금액의 합계 계산을 위해 정의한 속성
	
4. 속성의 개체 구성 방식에 따른 분류
 - 기본키 속성 : 개체를 유일하게 식별할 수 있는 속성
 - 외래키 속성 : 다른 개체와의 관계에서 포함된 속성
 - 일반 속성 : 개체에 포함되어 있고 기본키, 외래키에 포함되지 않은 속성
 
5. 관계
 - 개체와 개체 사이의 논리적인 연결
 - 개체 간의 관계와 속성 간의 관계가 있다.
 
6. 관계의 형태
 - 1:1 :개체 집합 A의 각 원소가 개체 집합 B의 원소 한 개와 대응하는 관계
 - 1:N : 개체 집합 A의 각 원소는 개체 집합 B의 원소 여러 개와 대응하지만, 개체 집합 B의 각 원소는 개체 집합 A의 원소 한 개와 대응하는 관계
 - N:M : 개체 집합 A - 개체 집합 B의 원소가 각각 여러 개와 대응하는 관계
 
7. 관계의 종류
 - 종속 관계 : 두 개체 사이의 주종 관계를 표현한 것. 식별 관계와 비식별 관계가 있음
 - 중복 관계 : 두 개체 사이에 2번 이상의 종속 관계가 발생하는 관계
 - 재귀 관계 : 개체가 자기 자신과 관계를 갖는 것. 순환 관계(Recursive Relationship)라고도 함.
 - 배타 관계 : 개체의 속성이나 구분자를 기준으로 개체의 특성을 분할. 배타 AND 관계와 배타 OR 관계로 구분.
 
Section 38. 식별자(Identifier)
1. 식별자
 - 하나의 개체 내에서 인스턴스(record, row)를 유일하게 구분할 수 있는 구분자
 - 모든 개체는 한 개 이상의 식별자를 반드시 가져야 한다.
 
2. 식별자의 분류
 - 대표성 여부 : 주 식별자(개체를 대표하는 유일한 식별자), 보조 식별자(주 식별자를 대신하여 개체를 식별할 수 있는 속성)
 - 스스로 생성 여부 : 내부 식별자(개체 내에서 스스로 만들어지는 식별자), 외부 식별자(다른 개채와의 관계에 의해 외부 개체의 식별자를 가져와 사용하는 식별자
 - 단일 속성 여부 : 단일 식별자(주 식별자가 한 가지 속성으로 구성), 복합 식별자(주 식별자가 두 개 이상의 속성으로 구성)
 - 대체 여부 : 원조 식별자(업무에 의해 만들어지는 가공되지 않은 원래의 식별자), 대리 식별자(주 식별자의 속성이 2개 이상일 경우 속성들을 하나로 묶어 사용하는 식별자)
 
3. 후보 식별자
 - 개체에서 각 인스턴스를 유일하게 식별할 수 있는 속성 또는 속성 집합
 - 하나의 개체에는 한 개 이상의 후보 식별자가 존재할 수 있다.
 - 이 중 개체의 대표성을 나타내는 식별자가 주 식별자, 나머지는 보조 식별자

4. 주 식별자의 특징
 - 유일성 : 개체 내의 모든 인스턴스들은 주 식별자에 의해 유일하게 구분되어야 함
 - 최소성 : 유일성을 만족시키기에 필요한 최소한의 속성으로만 구성되어야 함
 - 불변성 : 주 식별자가 특정 개체에 한 번 지정되면 그 식별자는 변하지 않아야 함
 - 존재성 : 주 식별자가 지정되면 식별자 속성에 반드시 데이터 값이 존재해야 함
 
